import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;

/**
 * A class that represents a picture.  This class inherits from 
 * SimplePicture and allows the student to add functionality to
 * the Picture class.  
 * 
 * Copyright Georgia Institute of Technology 2004-2005
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture 
{
  ///////////////////// constructors //////////////////////////////////
  
  /**
   * Constructor that takes no arguments 
   */
  public Picture ()
  {
    /* not needed but use it to show students the implicit call to super()
     * child constructors always call a parent constructor 
     */
    super();  
  }
  
  /**
   * Constructor that takes a file name and creates the picture 
   * @param fileName the name of the file to create the picture from
   */
  public Picture(String fileName)
  {
    // let the parent class handle this fileName
    super(fileName);
  }
  
  /**
   * Constructor that takes the width and height
   * @param width the width of the desired picture
   * @param height the height of the desired picture
   */
  public Picture(int width, int height)
  {
    // let the parent class handle this width and height
    super(width,height);
  }
  
  /**
   * Constructor that takes a picture and creates a 
   * copy of that picture
   */
  public Picture(Picture copyPicture)
  {
    // let the parent class do the copy
    super(copyPicture);
  }
  
  /**
   * Constructor that takes a buffered image
   * @param image the buffered image to use
   */
  public Picture(BufferedImage image)
  {
    super(image);
  }
  
  ////////////////////// methods ///////////////////////////////////////
  
  /**
   * Method to return a string with information about this picture.
   * @return a string with information about the picture such as fileName,
   * height and width.
   */
  public String toString()
  {
    String output = "Picture, filename " + getFileName() + 
      " height " + getHeight() 
      + " width " + getWidth();
    return output;
    
  }

  public void increaseRed()
  {
    changeRed(2);
    }
  
  public void decreaseGreen()  
  {
    changeGreen(.8); 
  }
    
   public void decreaseBlue() 
   {
     changeBlue(.8);
   }
  
    public void changeGreen(double factor)
  {
    Pixel[] pixelArray = this.getPixels();
    int value = 0;

    // loop through all the pixels in the array
    for (Pixel pixelObj : pixelArray)
    {

      // get the green value
      value = pixelObj.getGreen();

      // changing the green
      value = (int) (value * factor);
        
      // set the red value of the current pixel to the new value
      pixelObj.setGreen(value);
    }
  }

  public void changeBlue(double factor)
  {
    Pixel[] pixelArray = this.getPixels();
    int value = 0;

    // loop through all the pixels in the array
    for (Pixel pixelObj : pixelArray)
    {

      // get the blue value
      value = pixelObj.getBlue();

      // changing the blue
      value = (int) (value * factor);
        
      // set the red value of the current pixel to the new value
      pixelObj.setBlue(value);
    }
  }
  
  public void changeRed(double factor)
  {
    Pixel[] pixelArray = this.getPixels();
    int value = 0;

    // loop through all the pixels in the array
    for (Pixel pixelObj : pixelArray)
    {

      // get the red value
      value = pixelObj.getRed();

      // changing the red
      value = (int) (value * factor);
        
      // set the red value of the current pixel to the new value
      pixelObj.setRed(value);
    }
  }
 
  public static void main(String[] args) 
  {
   Picture pict = new Picture(FileChooser.pickAFile());
   pict.explore();
   pict.increaseRed();
   pict.explore();
  }
  
  
} // this } is the end of class Picture, put all new methods before this